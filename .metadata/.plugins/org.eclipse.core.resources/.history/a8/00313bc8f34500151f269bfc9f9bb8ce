/*
 * testPolygroup.cu
 *
 *  Created on: Jul 28, 2015
 *      Author: banafsheh
 */

#include "testPolygroup.h"
#include <stdio.h>

__global__ void testPolygroup(double* a, double* d, double* dpre, double* delay,
		double* ppre, double* post, double* pp, double* pre, double* s,
		bool* pngOutput, int* anchors, int* N, int* D, int* T,
		double* inputNeur, double* inputTime) {

	int i = 0, j = 0, k = 0, tf = 0, gr = 0, t = 0;
	//hard code
	int v1[5];
	int v2[5];
	int v3[5];
	int t0[3];
	int anch[3];
	int numSynapse = (int) (0.1 * (*N));
	int* v = new int[*N];
	int* u = new int[*N];

	int* last_fired = new int[*N];
	int* psp_times = new int[numSynapse];
	int group_firings[300][2];
	int group_gr[300][5];
	int* fired_path = new int[*N];
	int min_group_path = 1;
	int longest_path;



	//int blockId = blockIdx.x;
	//int threadId = threadIdx.x;
	//TODO compute the actual index
	int inputIndex = threadIdx.x + blockIdx.x * blockDim.x;
	anch[0] = anchors[inputIndex * 3]-1;
	anch[1] = anchors[inputIndex * 3 + 1]-1;
	anch[2] = anchors[inputIndex * 3 + 2]-1;
	printf("after for loop %d \n", inputIndex);

	for (i = 0; i < 5; i++) {
		v1[i] = ((((int) inputNeur[anch[0]] + 4) % 360) / 10) * 5 + i + 1;
		v2[i] = ((((int) inputNeur[anch[1]] + 4) % 360) / 10) * 5 + i + 1;
		v3[i] = ((((int) inputNeur[anch[2]] + 4) % 360) / 10) * 5 + i + 1;
	}

	for (i = 0; i < 3; i++) {
		t0[i] = inputTime[anch[i]];
	}



	/*for (i = 0; i < (*N); i++) {
	 v[i] = -70;
	 u[i] = 0.2 * v[i];
	 last_fired[i] = -(*T);
	 }*/

	int t1 = t0[0] + (anch[0] - 1) * 4;
	int t2 = t0[1] + (anch[1] - 1) * 4;
	int t3 = t0[2] + (anch[2] - 1) * 4;

	int** I = new int*[(*N)];
	for (i = 0; i < (*N); i++) {
		I[i] = new int[(*T) + (*D) + 300];
		for (int j1 = 0; j1 < (*T) + (*D) + 300; j1++) {
			I[i][j1] = 0;
		}
	}
	for (i = 0; i < (*N); i++) {
		v[i] = -70;
		u[i] = 0.2 * v[i];
		last_fired[i] = -(*T);

	}

	i = 0;
	for (i = 0; i < 5; i++) {
		I[v1[i]][t1++] = 20;
		I[v2[i]][t2++] = 20;
		I[v3[i]][t3++] = 20;
		/*I[v1[i] * ((*T) + (*D) + 500) + (++t1)] = 20;
		 I[v2[i] * ((*T) + (*D) + 500) + (++t2)] = 20;
		 I[v3[i] * ((*T) + (*D) + 500) + (++t3)] = 20;*/
	}

	i = 0;
	t = 0;
	j = 0;
	for (t = 0; t < (*T); t++) {
		int recent[50];
		int r = 0;
		for (i = 0; i < (*N); i++) {
			v[i] += 0.5 * ((0.04 * v[i] + 5) * v[i] + 140 - u[i] + I[i][t]);
			v[i] += 0.5 * ((0.04 * v[i] + 5) * v[i] + 140 - u[i] + I[i][t]);
			u[i] += a[i] * (0.2 * v[i] - u[i]);
		}

		for (i = 0; i < (*N); i++) {
			if (v[i] >= 30) {
				v[i] = -65;
				u[i] += d[i];
				last_fired[i] = t;

				//I(pp{fired(k)}+t*N)=I(pp{fired(k)}+t*N)+s(fired(k),:);
				for (k = 0; k < numSynapse; k++) {
					int temp = pp[i * 22 + k] + t * (*N);
					temp = (temp - post[i * 22 + k]) / (*N) + 1;
					int temp1 = post[i * 22 + k];
					I[temp1][temp] = I[temp1][temp] + s[i * 22 + k];
				}

				//50 is the second dimension of dpre and ppre (hard code)
				//PSP_times= last_fired(ppre{fired(k)}) + dpre{fired(k)}';
				int temp2;
				for (j = 0; j < 50; j++) {
					temp2 = ppre[i * 50 + j];
					psp_times[j] = last_fired[temp2] + dpre[i * 50 + j];
				}

				//recent=find(PSP_times < t & PSP_times > t-10 & s(pre{fired(k)})' > 0 );
				for (j = 0; j < 50; j++) {
					int temp = pre[i * 50 + j];
					if (temp != 0) {
						temp = (temp - ppre[i * 50 + j]) / (*N) + 1;
						if (psp_times[j] < t & psp_times[j] > t - 10
								& temp > 0) {
							recent[r++] = j;
						}
					}
				}
				// length of recent is r-1
				//group.gr = [group.gr; last_fired(ppre{fired(k)}(recent)),  ppre{fired(k)}(recent)', ...  % presynaptic (time, neuron #)
				//last_fired(ppre{fired(k)}(recent)) + dpre{fired(k)}(recent)',...   % arrival of PSP (time)
				//fired(k)*(ones(length(recent),1)), ...                            % postsynaptic (neuron)
				//t*(ones(length(recent),1))];

				for (j = 0; j < r - 1; j++) {
					int temp3 = ppre[i * 50 + recent[j]];
					group_gr[gr][0] = last_fired[temp3];
					group_gr[gr][1] = ppre[i * 50 + recent[j]];
					group_gr[gr][2] = last_fired[temp3]
							+ dpre[i * 50 + recent[j]];
					group_gr[gr][3] = i;
					group_gr[gr++][4] = t;
				}

				//group.firings=[group.firings; t, fired(k)];
				group_firings[tf][0] = t;
				group_firings[tf++][1] = i;

			}
		}

	}
	//for j=1:length(gr.gr(:,2))
	//fired_path( gr.gr(j,4) ) = max( fired_path( gr.gr(j,4) ), 1+fired_path( gr.gr(j,2) ));
	//end;
	for (i = 0; i < gr - 1; i++) {
		fired_path[group_gr[i][3]] =
				(fired_path[group_gr[i][3]] > 1 + fired_path[group_gr[i][1]]) ?
						(fired_path[group_gr[i][3]]) :
						(1 + fired_path[group_gr[i][1]]);
	}

	//longest_path = max(fired_path);
	int max = 0;
	for (i = 0; i < (*N); i++) {
		if (fired_path[i] > max)
			max = fired_path[i];
	}
	printf("max %d", max);
	if (max > min_group_path)
		pngOutput[inputIndex] = true;
	else
		pngOutput[inputIndex] = false;

	for (i = 0; i < (*N); i++)
		delete[] I[i];
	delete[] I;
}

